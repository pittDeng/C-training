class Solution {
public:
    void solveSudoku(vector<vector<char>>& board) {
        go(board,0,0);
    }
private:
    bool go(vector<vector<char>>&B,int i,int j)
    //深度优先算法，如果不合格，再向后回溯
    {
        if(j==9){i=i+1;j=0;}
        if(i==9)return true;
        if(B[i][j]!='.')return go(B,i,j+1);
        for(char k='1';k<='9';k++)
        {
            if(!isValid(B,i,j,k))continue;
            B[i][j]=k;
            if(go(B,i,j+1))return true;
            B[i][j]='.';
        }
        return false;
    }
    
    bool isValid(vector<vector<char>>&B,int i,int j,char k)
    //检查本次输入结果是否合法
    {
        for(int x=0;x<9;x++)
        {
            if(B[x][j]==k||B[i][x]==k)return false;
        }
        int beginrow=i>5?6:i>2?3:0;
        int begincol=j>5?6:j>2?3:0;
        for(int xi=0;xi<3;xi++)
            for(int xj=0;xj<3;xj++)
                if(B[beginrow+xi][begincol+xj]==k)return false;
        return true;
    }
};
